<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on GO course</title>
    <link>https://ribgsilva.github.io/docs/</link>
    <description>Recent content in Docs on GO course</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://ribgsilva.github.io/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Quickstart</title>
      <link>https://ribgsilva.github.io/go-course/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ribgsilva.github.io/go-course/quickstart/</guid>
      <description>Quickstart #  Installation #  To install Go, just follow the documentation in the official web page
Is really simple to install.
Version Manager #  I personally like to use a version manager to easily change versions working cross projets.
I use g, but there are a lot of others out there. Just pick the one you like more.
Private Repository #  If you want to use some private repository (and probably you will), you will need to configure 2 things:</description>
    </item>
    
    <item>
      <title>Hello world</title>
      <link>https://ribgsilva.github.io/go-course/hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ribgsilva.github.io/go-course/hello-world/</guid>
      <description>Hello world #  First Project #  Let&amp;rsquo;s create the first project.
Create a folder to use as project folder.
mkdir helloworld; cd helloworld  Then create your first file main.go and type the following code:
package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;Hello world&amp;#34;) } To run it, just type:
go run main.go  So let&amp;rsquo;s understand the code.
package #  The first line of code is the package name.</description>
    </item>
    
    <item>
      <title>Basics</title>
      <link>https://ribgsilva.github.io/go-course/basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ribgsilva.github.io/go-course/basics/</guid>
      <description>Basics #  So let&amp;rsquo;s create a basic addition code.
package main import &amp;#34;fmt&amp;#34; func addInt(x int, y int) int { return x + y } func printResult(result string) { fmt.Println(result) } func main() { a := 5 b := 3 sum := addInt(a, b) messageResult := fmt.Sprintf(&amp;#34;the sum of %d and %d is %d&amp;#34;, a, b, sum) printResult(messageResult) } Functions #  Here we created our first function. It is composed by 3 main points:</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>https://ribgsilva.github.io/go-course/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ribgsilva.github.io/go-course/json/</guid>
      <description>JSON #  Work With Json #  To handle json, go has a native librabry for that.
encoding/json  It is really easy to use it.
Check the example below.
package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; ) const myJson = `{ &amp;#34;name&amp;#34;: &amp;#34;my name&amp;#34;, &amp;#34;age&amp;#34;: 15, &amp;#34;alive&amp;#34;: true, &amp;#34;extras&amp;#34;: &amp;#34;extra infos&amp;#34;, &amp;#34;privateField&amp;#34;: &amp;#34;using a private field&amp;#34;, &amp;#34;omitted&amp;#34;: &amp;#34;field omitted if empty&amp;#34; }` type user struct { Name string `json:&amp;#34;name&amp;#34;` Age int `json:&amp;#34;age&amp;#34;` Alive bool `json:&amp;#34;alive&amp;#34;` DateOfBirth string `json:&amp;#34;dob&amp;#34;` privateField string `json:&amp;#34;privateField&amp;#34;` Omitted string `json:&amp;#34;omitted,omitempty&amp;#34;` } func main() { var u user if err := json.</description>
    </item>
    
    <item>
      <title>Gin Gonic</title>
      <link>https://ribgsilva.github.io/go-course/gin-gonic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ribgsilva.github.io/go-course/gin-gonic/</guid>
      <description>Gin Gonic #  Http server with Gin Gonic #  Go has a native library to handle http requests.
net/http  I personally like to use the Gin Gonic and that is what I will use here.
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; &amp;#34;net/http&amp;#34; ) type user struct { Name string `json:&amp;#34;name&amp;#34;` } func main() { engine := gin.Default() engine.Handle(http.MethodPost, &amp;#34;/user&amp;#34;, createUser) engine.Handle(http.MethodGet, &amp;#34;/user&amp;#34;, getUser) if err := engine.Run(&amp;#34;:8080&amp;#34;); err !</description>
    </item>
    
    <item>
      <title>Database</title>
      <link>https://ribgsilva.github.io/go-course/database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ribgsilva.github.io/go-course/database/</guid>
      <description>Database #  Packages #  You can access database throught the sql package:
database/sql  But there are a lot of different libs with more features like:
https://github.com/jmoiron/sqlx https://github.com/go-gorm/gorm https://github.com/rocketlaunchr/dbq  Here I will teach the native lib.
Imports #  Fist, we need to add the import of the lib, and the data base driver:
import ( &amp;#34;database/sql&amp;#34; _ &amp;#34;github.com/go-sql-driver/mysql&amp;#34; ) In this case, we are using mysql and we are giving an alias to the lib as _.</description>
    </item>
    
    <item>
      <title>Goroutines</title>
      <link>https://ribgsilva.github.io/go-course/goroutines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ribgsilva.github.io/go-course/goroutines/</guid>
      <description>Goroutines #  Go routines are process that runs in parallel, as threads.
First, we need one method to be executed in paralel.
func count(n int) { for i := 0; i &amp;lt; n; i++ { fmt.Printf(&amp;#34;current value %d \r\n&amp;#34;, i) time.Sleep(500 * time.Millisecond) } } In our main method, we can call it.
func main() { n := 5 count(n) println(&amp;#34;end&amp;#34;) } We expect this result:
current value 0 current value 1 current value 2 current value 3 current value 4 end Exiting.</description>
    </item>
    
  </channel>
</rss>
